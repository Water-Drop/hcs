!function(t) {
    if ("object" == typeof exports)
        module.exports = t();
    else if ("function" == typeof define && define.amd)
        define(t);
    else {
        var e;
        "undefined" != typeof window ? e = window : "undefined" != typeof global ? e = global : "undefined" != typeof self && (e = self), e.poly2tri = t()
    }
}(function() {
  return function t(e, n, i) {
  function o(s, a) {
  if (!n[s]) {
  if (!e[s]) {
  var l = "function" == typeof require && require;
  if (!a && l)
  return l(s, !0);
  if (r)
  return r(s, !0);
  throw new Error("Cannot find module '" + s + "'")
  }
  var h = n[s] = {exports: {}};
  e[s][0].call(h.exports, function(t) {
               var n = e[s][1][t];
               return o(n ? n : t)
               }, h, h.exports, t, e, n, i)
  }
  return n[s].exports
  }
  for (var r = "function" == typeof require && require, s = 0; s < i.length; s++)
  o(i[s]);
  return o
  }({1: [function(t, e) {
         e.exports = {version: "1.3.3"}
         }, {}],2: [function(t, e) {
                    "use strict";
                    var n = function(t, e) {
                    this.point = t, this.triangle = e || null, this.next = null, this.prev = null, this.value = t.x
                    }, i = function(t, e) {
                    this.head_ = t, this.tail_ = e, this.search_node_ = t
                    };
                    i.prototype.head = function() {
                    return this.head_
                    }, i.prototype.setHead = function(t) {
                    this.head_ = t
                    }, i.prototype.tail = function() {
                    return this.tail_
                    }, i.prototype.setTail = function(t) {
                    this.tail_ = t
                    }, i.prototype.search = function() {
                    return this.search_node_
                    }, i.prototype.setSearch = function(t) {
                    this.search_node_ = t
                    }, i.prototype.findSearchNode = function() {
                    return this.search_node_
                    }, i.prototype.locateNode = function(t) {
                    var e = this.search_node_;
                    if (t < e.value) {
                    for (; e = e.prev; )
                    if (t >= e.value)
                    return this.search_node_ = e, e
                    } else
                    for (; e = e.next; )
                    if (t < e.value)
                    return this.search_node_ = e.prev, e.prev;
                    return null
                    }, i.prototype.locatePoint = function(t) {
                    var e = t.x, n = this.findSearchNode(e), i = n.point.x;
                    if (e === i) {
                    if (t !== n.point)
                    if (t === n.prev.point)
                    n = n.prev;
                    else {
                    if (t !== n.next.point)
                    throw new Error("poly2tri Invalid AdvancingFront.locatePoint() call");
                    n = n.next
                    }
                    } else if (i > e)
                    for (; (n = n.prev) && t !== n.point; )
                    ;
                    else
                    for (; (n = n.next) && t !== n.point; )
                    ;
                    return n && (this.search_node_ = n), n
                    }, e.exports = i, e.exports.Node = n
                    }, {}],3: [function(t, e) {
                               "use strict";
                               var n = t("./xy"), i = function(t, e) {
                               this.x = +t || 0, this.y = +e || 0, this._p2t_edge_list = null
                               };
                               i.prototype.toString = function() {
                               return n.toStringBase(this)
                               }, i.prototype.clone = function() {
                               return new i(this.x, this.y)
                               }, i.prototype.set_zero = function() {
                               return this.x = 0, this.y = 0, this
                               }, i.prototype.set = function(t, e) {
                               return this.x = +t || 0, this.y = +e || 0, this
                               }, i.prototype.negate = function() {
                               return this.x = -this.x, this.y = -this.y, this
                               }, i.prototype.add = function(t) {
                               return this.x += t.x, this.y += t.y, this
                               }, i.prototype.sub = function(t) {
                               return this.x -= t.x, this.y -= t.y, this
                               }, i.prototype.mul = function(t) {
                               return this.x *= t, this.y *= t, this
                               }, i.prototype.length = function() {
                               return Math.sqrt(this.x * this.x + this.y * this.y)
                               }, i.prototype.normalize = function() {
                               var t = this.length();
                               return this.x /= t, this.y /= t, t
                               }, i.prototype.equals = function(t) {
                               return this.x === t.x && this.y === t.y
                               }, i.negate = function(t) {
                               return new i(-t.x, -t.y)
                               }, i.add = function(t, e) {
                               return new i(t.x + e.x, t.y + e.y)
                               }, i.sub = function(t, e) {
                               return new i(t.x - e.x, t.y - e.y)
                               }, i.mul = function(t, e) {
                               return new i(t * e.x, t * e.y)
                               }, i.cross = function(t, e) {
                               return "number" == typeof t ? "number" == typeof e ? t * e : new i(-t * e.y, t * e.x) : "number" == typeof e ? new i(e * t.y, -e * t.x) : t.x * e.y - t.y * e.x
                               }, i.toString = n.toString, i.compare = n.compare, i.cmp = n.compare, i.equals = n.equals, i.dot = function(t, e) {
                               return t.x * e.x + t.y * e.y
                               }, e.exports = i
                               }, {"./xy": 10}],4: [function(t, e) {
                                                    "use strict";
                                                    var n = t("./xy"), i = function(t, e) {
                                                    this.name = "PointError", this.points = e = e || [], this.message = t || "Invalid Points!";
                                                    for (var i = 0; i < e.length; i++)
                                                    this.message += " " + n.toString(e[i])
                                                    };
                                                    i.prototype = new Error, i.prototype.constructor = i, e.exports = i
                                                    }, {"./xy": 10}],5: [function(t, e, n) {
                                                                         (function(e) {
                                                                          "use strict";
                                                                          var i = e.poly2tri;
                                                                          n.noConflict = function() {
                                                                          return e.poly2tri = i, n
                                                                          }, n.VERSION = t("../dist/version.json").version, n.PointError = t("./pointerror"), n.Point = t("./point"), n.Triangle = t("./triangle"), n.SweepContext = t("./sweepcontext");
                                                                          var o = t("./sweep");
                                                                          n.triangulate = o.triangulate, n.sweep = {Triangulate: o.triangulate}
                                                                          }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
                                                                         }, {"../dist/version.json": 1,"./point": 3,"./pointerror": 4,"./sweep": 6,"./sweepcontext": 7,"./triangle": 8}],6: [function(t, e, n) {
                                                                                                                                                                                             "use strict";
                                                                                                                                                                                             function i(t) {
                                                                                                                                                                                             t.initTriangulation(), t.createAdvancingFront(), o(t), r(t)
                                                                                                                                                                                             }
                                                                                                                                                                                             function o(t) {
                                                                                                                                                                                             var e, n = t.pointCount();
                                                                                                                                                                                             for (e = 1; n > e; ++e)
                                                                                                                                                                                             for (var i = t.getPoint(e), o = s(t, i), r = i._p2t_edge_list, l = 0; r && l < r.length; ++l)
                                                                                                                                                                                             a(t, r[l], o)
                                                                                                                                                                                             }
                                                                                                                                                                                             function r(t) {
                                                                                                                                                                                             for (var e = t.front().head().next.triangle, n = t.front().head().next.point; !e.getConstrainedEdgeCW(n); )
                                                                                                                                                                                             e = e.neighborCCW(n);
                                                                                                                                                                                             t.meshClean(e)
                                                                                                                                                                                             }
                                                                                                                                                                                             function s(t, e) {
                                                                                                                                                                                             var n = t.locateNode(e), i = c(t, e, n);
                                                                                                                                                                                             return e.x <= n.point.x + Y && u(t, n), p(t, i), i
                                                                                                                                                                                             }
                                                                                                                                                                                             function a(t, e, n) {
                                                                                                                                                                                             t.edge_event.constrained_edge = e, t.edge_event.right = e.p.x > e.q.x, h(n.triangle, e.p, e.q) || (w(t, e, n), l(t, e.p, e.q, n.triangle, e.q))
                                                                                                                                                                                             }
                                                                                                                                                                                             function l(t, e, n, i, o) {
                                                                                                                                                                                             if (!h(i, e, n)) {
                                                                                                                                                                                             var r = i.pointCCW(o), s = j(n, r, e);
                                                                                                                                                                                             if (s === z.COLLINEAR)
                                                                                                                                                                                             throw new I("poly2tri EdgeEvent: Collinear not supported!", [n, r, e]);
                                                                                                                                                                                             var a = i.pointCW(o), c = j(n, a, e);
                                                                                                                                                                                             if (c === z.COLLINEAR)
                                                                                                                                                                                             throw new I("poly2tri EdgeEvent: Collinear not supported!", [n, a, e]);
                                                                                                                                                                                             s === c ? (i = s === z.CW ? i.neighborCCW(o) : i.neighborCW(o), l(t, e, n, i, o)) : S(t, e, n, i, o)
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             function h(t, e, n) {
                                                                                                                                                                                             var i = t.edgeIndex(e, n);
                                                                                                                                                                                             if (-1 !== i) {
                                                                                                                                                                                             t.markConstrainedEdgeByIndex(i);
                                                                                                                                                                                             var o = t.getNeighbor(i);
                                                                                                                                                                                             return o && o.markConstrainedEdgeByPoints(e, n), !0
                                                                                                                                                                                             }
                                                                                                                                                                                             return !1
                                                                                                                                                                                             }
                                                                                                                                                                                             function c(t, e, n) {
                                                                                                                                                                                             var i = new N(e, n.point, n.next.point);
                                                                                                                                                                                             i.markNeighbor(n.triangle), t.addToMap(i);
                                                                                                                                                                                             var o = new R(e);
                                                                                                                                                                                             return o.next = n.next, o.prev = n, n.next.prev = o, n.next = o, g(t, i) || t.mapTriangleToNodes(i), o
                                                                                                                                                                                             }
                                                                                                                                                                                             function u(t, e) {
                                                                                                                                                                                             var n = new N(e.prev.point, e.point, e.next.point);
                                                                                                                                                                                             n.markNeighbor(e.prev.triangle), n.markNeighbor(e.triangle), t.addToMap(n), e.prev.next = e.next, e.next.prev = e.prev, g(t, n) || t.mapTriangleToNodes(n)
                                                                                                                                                                                             }
                                                                                                                                                                                             function p(t, e) {
                                                                                                                                                                                             for (var n, i = e.next; i.next && (n = m(i), !(n > F || -F > n)); )
                                                                                                                                                                                             u(t, i), i = i.next;
                                                                                                                                                                                             for (i = e.prev; i.prev && (n = m(i), !(n > F || -F > n)); )
                                                                                                                                                                                             u(t, i), i = i.prev;
                                                                                                                                                                                             e.next && e.next.next && (n = d(e), V > n && _(t, e))
                                                                                                                                                                                             }
                                                                                                                                                                                             function d(t) {
                                                                                                                                                                                             var e = t.point.x - t.next.next.point.x, n = t.point.y - t.next.next.point.y;
                                                                                                                                                                                             return Math.atan2(n, e)
                                                                                                                                                                                             }
                                                                                                                                                                                             function m(t) {
                                                                                                                                                                                             var e = t.next.point.x - t.point.x, n = t.next.point.y - t.point.y, i = t.prev.point.x - t.point.x, o = t.prev.point.y - t.point.y;
                                                                                                                                                                                             return Math.atan2(e * o - n * i, e * i + n * o)
                                                                                                                                                                                             }
                                                                                                                                                                                             function g(t, e) {
                                                                                                                                                                                             for (var n = 0; 3 > n; ++n)
                                                                                                                                                                                             if (!e.delaunay_edge[n]) {
                                                                                                                                                                                             var i = e.getNeighbor(n);
                                                                                                                                                                                             if (i) {
                                                                                                                                                                                             var o = e.getPoint(n), r = i.oppositePoint(e, o), s = i.index(r);
                                                                                                                                                                                             if (i.constrained_edge[s] || i.delaunay_edge[s]) {
                                                                                                                                                                                             e.constrained_edge[n] = i.constrained_edge[s];
                                                                                                                                                                                             continue
                                                                                                                                                                                             }
                                                                                                                                                                                             var a = f(o, e.pointCCW(o), e.pointCW(o), r);
                                                                                                                                                                                             if (a) {
                                                                                                                                                                                             e.delaunay_edge[n] = !0, i.delaunay_edge[s] = !0, y(e, o, i, r);
                                                                                                                                                                                             var l = !g(t, e);
                                                                                                                                                                                             return l && t.mapTriangleToNodes(e), l = !g(t, i), l && t.mapTriangleToNodes(i), e.delaunay_edge[n] = !1, i.delaunay_edge[s] = !1, !0
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             return !1
                                                                                                                                                                                             }
                                                                                                                                                                                             function f(t, e, n, i) {
                                                                                                                                                                                             var o = t.x - i.x, r = t.y - i.y, s = e.x - i.x, a = e.y - i.y, l = o * a, h = s * r, c = l - h;
                                                                                                                                                                                             if (0 >= c)
                                                                                                                                                                                             return !1;
                                                                                                                                                                                             var u = n.x - i.x, p = n.y - i.y, d = u * r, m = o * p, g = d - m;
                                                                                                                                                                                             if (0 >= g)
                                                                                                                                                                                             return !1;
                                                                                                                                                                                             var f = s * p, y = u * a, _ = o * o + r * r, v = s * s + a * a, b = u * u + p * p, w = _ * (f - y) + v * g + b * c;
                                                                                                                                                                                             return w > 0
                                                                                                                                                                                             }
                                                                                                                                                                                             function y(t, e, n, i) {
                                                                                                                                                                                             var o, r, s, a;
                                                                                                                                                                                             o = t.neighborCCW(e), r = t.neighborCW(e), s = n.neighborCCW(i), a = n.neighborCW(i);
                                                                                                                                                                                             var l, h, c, u;
                                                                                                                                                                                             l = t.getConstrainedEdgeCCW(e), h = t.getConstrainedEdgeCW(e), c = n.getConstrainedEdgeCCW(i), u = n.getConstrainedEdgeCW(i);
                                                                                                                                                                                             var p, d, m, g;
                                                                                                                                                                                             p = t.getDelaunayEdgeCCW(e), d = t.getDelaunayEdgeCW(e), m = n.getDelaunayEdgeCCW(i), g = n.getDelaunayEdgeCW(i), t.legalize(e, i), n.legalize(i, e), n.setDelaunayEdgeCCW(e, p), t.setDelaunayEdgeCW(e, d), t.setDelaunayEdgeCCW(i, m), n.setDelaunayEdgeCW(i, g), n.setConstrainedEdgeCCW(e, l), t.setConstrainedEdgeCW(e, h), t.setConstrainedEdgeCCW(i, c), n.setConstrainedEdgeCW(i, u), t.clearNeigbors(), n.clearNeigbors(), o && n.markNeighbor(o), r && t.markNeighbor(r), s && t.markNeighbor(s), a && n.markNeighbor(a), t.markNeighbor(n)
                                                                                                                                                                                             }
                                                                                                                                                                                             function _(t, e) {
                                                                                                                                                                                             for (t.basin.left_node = j(e.point, e.next.point, e.next.next.point) === z.CCW ? e.next.next : e.next, t.basin.bottom_node = t.basin.left_node; t.basin.bottom_node.next && t.basin.bottom_node.point.y >= t.basin.bottom_node.next.point.y; )
                                                                                                                                                                                             t.basin.bottom_node = t.basin.bottom_node.next;
                                                                                                                                                                                             if (t.basin.bottom_node !== t.basin.left_node) {
                                                                                                                                                                                             for (t.basin.right_node = t.basin.bottom_node; t.basin.right_node.next && t.basin.right_node.point.y < t.basin.right_node.next.point.y; )
                                                                                                                                                                                             t.basin.right_node = t.basin.right_node.next;
                                                                                                                                                                                             t.basin.right_node !== t.basin.bottom_node && (t.basin.width = t.basin.right_node.point.x - t.basin.left_node.point.x, t.basin.left_highest = t.basin.left_node.point.y > t.basin.right_node.point.y, v(t, t.basin.bottom_node))
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             function v(t, e) {
                                                                                                                                                                                             if (!b(t, e)) {
                                                                                                                                                                                             u(t, e);
                                                                                                                                                                                             var n;
                                                                                                                                                                                             if (e.prev !== t.basin.left_node || e.next !== t.basin.right_node) {
                                                                                                                                                                                             if (e.prev === t.basin.left_node) {
                                                                                                                                                                                             if (n = j(e.point, e.next.point, e.next.next.point), n === z.CW)
                                                                                                                                                                                             return;
                                                                                                                                                                                             e = e.next
                                                                                                                                                                                             } else if (e.next === t.basin.right_node) {
                                                                                                                                                                                             if (n = j(e.point, e.prev.point, e.prev.prev.point), n === z.CCW)
                                                                                                                                                                                             return;
                                                                                                                                                                                             e = e.prev
                                                                                                                                                                                             } else
                                                                                                                                                                                             e = e.prev.point.y < e.next.point.y ? e.prev : e.next;
                                                                                                                                                                                             v(t, e)
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             function b(t, e) {
                                                                                                                                                                                             var n;
                                                                                                                                                                                             return n = t.basin.left_highest ? t.basin.left_node.point.y - e.point.y : t.basin.right_node.point.y - e.point.y, t.basin.width > n ? !0 : !1
                                                                                                                                                                                             }
                                                                                                                                                                                             function w(t, e, n) {
                                                                                                                                                                                             t.edge_event.right ? x(t, e, n) : B(t, e, n)
                                                                                                                                                                                             }
                                                                                                                                                                                             function x(t, e, n) {
                                                                                                                                                                                             for (; n.next.point.x < e.p.x; )
                                                                                                                                                                                             j(e.q, n.next.point, e.p) === z.CCW ? C(t, e, n) : n = n.next
                                                                                                                                                                                             }
                                                                                                                                                                                             function C(t, e, n) {
                                                                                                                                                                                             n.point.x < e.p.x && (j(n.point, n.next.point, n.next.next.point) === z.CCW ? M(t, e, n) : (D(t, e, n), C(t, e, n)))
                                                                                                                                                                                             }
                                                                                                                                                                                             function M(t, e, n) {
                                                                                                                                                                                             u(t, n.next), n.next.point !== e.p && j(e.q, n.next.point, e.p) === z.CCW && j(n.point, n.next.point, n.next.next.point) === z.CCW && M(t, e, n)
                                                                                                                                                                                             }
                                                                                                                                                                                             function D(t, e, n) {
                                                                                                                                                                                             j(n.next.point, n.next.next.point, n.next.next.next.point) === z.CCW ? M(t, e, n.next) : j(e.q, n.next.next.point, e.p) === z.CCW && D(t, e, n.next)
                                                                                                                                                                                             }
                                                                                                                                                                                             function B(t, e, n) {
                                                                                                                                                                                             for (; n.prev.point.x > e.p.x; )
                                                                                                                                                                                             j(e.q, n.prev.point, e.p) === z.CW ? A(t, e, n) : n = n.prev
                                                                                                                                                                                             }
                                                                                                                                                                                             function A(t, e, n) {
                                                                                                                                                                                             n.point.x > e.p.x && (j(n.point, n.prev.point, n.prev.prev.point) === z.CW ? T(t, e, n) : (E(t, e, n), A(t, e, n)))
                                                                                                                                                                                             }
                                                                                                                                                                                             function E(t, e, n) {
                                                                                                                                                                                             j(n.prev.point, n.prev.prev.point, n.prev.prev.prev.point) === z.CW ? T(t, e, n.prev) : j(e.q, n.prev.prev.point, e.p) === z.CW && E(t, e, n.prev)
                                                                                                                                                                                             }
                                                                                                                                                                                             function T(t, e, n) {
                                                                                                                                                                                             u(t, n.prev), n.prev.point !== e.p && j(e.q, n.prev.point, e.p) === z.CW && j(n.point, n.prev.point, n.prev.prev.point) === z.CW && T(t, e, n)
                                                                                                                                                                                             }
                                                                                                                                                                                             function S(t, e, n, i, o) {
                                                                                                                                                                                             var r = i.neighborAcross(o);
                                                                                                                                                                                             if (!r)
                                                                                                                                                                                             throw new Error("poly2tri [BUG:FIXME] FLIP failed due to missing triangle!");
                                                                                                                                                                                             var s = r.oppositePoint(i, o);
                                                                                                                                                                                             if (i.getConstrainedEdgeAcross(o)) {
                                                                                                                                                                                             var a = i.index(o);
                                                                                                                                                                                             throw new I("poly2tri Intersecting Constraints", [o, s, i.getPoint((a + 1) % 3), i.getPoint((a + 2) % 3)])
                                                                                                                                                                                             }
                                                                                                                                                                                             if (W(o, i.pointCCW(o), i.pointCW(o), s))
                                                                                                                                                                                             if (y(i, o, r, s), t.mapTriangleToNodes(i), t.mapTriangleToNodes(r), o === n && s === e)
                                                                                                                                                                                             n === t.edge_event.constrained_edge.q && e === t.edge_event.constrained_edge.p && (i.markConstrainedEdgeByPoints(e, n), r.markConstrainedEdgeByPoints(e, n), g(t, i), g(t, r));
                                                                                                                                                                                             else {
                                                                                                                                                                                             var h = j(n, s, e);
                                                                                                                                                                                             i = L(t, h, i, r, o, s), S(t, e, n, i, o)
                                                                                                                                                                                             }
                                                                                                                                                                                             else {
                                                                                                                                                                                             var c = O(e, n, r, s);
                                                                                                                                                                                             P(t, e, n, i, r, c), l(t, e, n, i, o)
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             function L(t, e, n, i, o, r) {
                                                                                                                                                                                             var s;
                                                                                                                                                                                             return e === z.CCW ? (s = i.edgeIndex(o, r), i.delaunay_edge[s] = !0, g(t, i), i.clearDelunayEdges(), n) : (s = n.edgeIndex(o, r), n.delaunay_edge[s] = !0, g(t, n), n.clearDelunayEdges(), i)
                                                                                                                                                                                             }
                                                                                                                                                                                             function O(t, e, n, i) {
                                                                                                                                                                                             var o = j(e, i, t);
                                                                                                                                                                                             if (o === z.CW)
                                                                                                                                                                                             return n.pointCCW(i);
                                                                                                                                                                                             if (o === z.CCW)
                                                                                                                                                                                             return n.pointCW(i);
                                                                                                                                                                                             throw new I("poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!", [e, i, t])
                                                                                                                                                                                             }
                                                                                                                                                                                             function P(t, e, n, i, o, r) {
                                                                                                                                                                                             var s = o.neighborAcross(r);
                                                                                                                                                                                             if (!s)
                                                                                                                                                                                             throw new Error("poly2tri [BUG:FIXME] FLIP failed due to missing triangle");
                                                                                                                                                                                             var a = s.oppositePoint(o, r);
                                                                                                                                                                                             if (W(n, i.pointCCW(n), i.pointCW(n), a))
                                                                                                                                                                                             S(t, n, a, s, a);
                                                                                                                                                                                             else {
                                                                                                                                                                                             var l = O(e, n, s, a);
                                                                                                                                                                                             P(t, e, n, i, s, l)
                                                                                                                                                                                             }
                                                                                                                                                                                             }
                                                                                                                                                                                             var I = t("./pointerror"), N = t("./triangle"), R = t("./advancingfront").Node, k = t("./utils"), V = 3 * Math.PI / 4, F = Math.PI / 2, Y = k.EPSILON, z = k.Orientation, j = k.orient2d, W = k.inScanArea;
                                                                                                                                                                                             n.triangulate = i
                                                                                                                                                                                             }, {"./advancingfront": 2,"./pointerror": 4,"./triangle": 8,"./utils": 9}],7: [function(t, e) {
                                                                                                                                                                                                                                                                            "use strict";
                                                                                                                                                                                                                                                                            var n = t("./pointerror"), i = t("./point"), o = t("./triangle"), r = t("./sweep"), s = t("./advancingfront"), a = s.Node, l = .3, h = function(t, e) {
                                                                                                                                                                                                                                                                            if (this.p = t, this.q = e, t.y > e.y)
                                                                                                                                                                                                                                                                            this.q = t, this.p = e;
                                                                                                                                                                                                                                                                            else if (t.y === e.y)
                                                                                                                                                                                                                                                                            if (t.x > e.x)
                                                                                                                                                                                                                                                                            this.q = t, this.p = e;
                                                                                                                                                                                                                                                                            else if (t.x === e.x)
                                                                                                                                                                                                                                                                            throw new n("poly2tri Invalid Edge constructor: repeated points!", [t]);
                                                                                                                                                                                                                                                                            this.q._p2t_edge_list || (this.q._p2t_edge_list = []), this.q._p2t_edge_list.push(this)
                                                                                                                                                                                                                                                                            }, c = function() {
                                                                                                                                                                                                                                                                            this.left_node = null, this.bottom_node = null, this.right_node = null, this.width = 0, this.left_highest = !1
                                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                                            c.prototype.clear = function() {
                                                                                                                                                                                                                                                                            this.left_node = null, this.bottom_node = null, this.right_node = null, this.width = 0, this.left_highest = !1
                                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                                            var u = function() {
                                                                                                                                                                                                                                                                            this.constrained_edge = null, this.right = !1
                                                                                                                                                                                                                                                                            }, p = function(t, e) {
                                                                                                                                                                                                                                                                            e = e || {}, this.triangles_ = [], this.map_ = [], this.points_ = e.cloneArrays ? t.slice(0) : t, this.edge_list = [], this.pmin_ = this.pmax_ = null, this.front_ = null, this.head_ = null, this.tail_ = null, this.af_head_ = null, this.af_middle_ = null, this.af_tail_ = null, this.basin = new c, this.edge_event = new u, this.initEdges(this.points_)
                                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                                            p.prototype.addHole = function(t) {
                                                                                                                                                                                                                                                                            this.initEdges(t);
                                                                                                                                                                                                                                                                            var e, n = t.length;
                                                                                                                                                                                                                                                                            for (e = 0; n > e; e++)
                                                                                                                                                                                                                                                                            this.points_.push(t[e]);
                                                                                                                                                                                                                                                                            return this
                                                                                                                                                                                                                                                                            }, p.prototype.AddHole = p.prototype.addHole, p.prototype.addPoint = function(t) {
                                                                                                                                                                                                                                                                            return this.points_.push(t), this
                                                                                                                                                                                                                                                                            }, p.prototype.AddPoint = p.prototype.addPoint, p.prototype.addPoints = function(t) {
                                                                                                                                                                                                                                                                            return this.points_ = this.points_.concat(t), this
                                                                                                                                                                                                                                                                            }, p.prototype.triangulate = function() {
                                                                                                                                                                                                                                                                            return r.triangulate(this), this
                                                                                                                                                                                                                                                                            }, p.prototype.getBoundingBox = function() {
                                                                                                                                                                                                                                                                            return {min: this.pmin_,max: this.pmax_}
                                                                                                                                                                                                                                                                            }, p.prototype.getTriangles = function() {
                                                                                                                                                                                                                                                                            return this.triangles_
                                                                                                                                                                                                                                                                            }, p.prototype.GetTriangles = p.prototype.getTriangles, p.prototype.front = function() {
                                                                                                                                                                                                                                                                            return this.front_
                                                                                                                                                                                                                                                                            }, p.prototype.pointCount = function() {
                                                                                                                                                                                                                                                                            return this.points_.length
                                                                                                                                                                                                                                                                            }, p.prototype.head = function() {
                                                                                                                                                                                                                                                                            return this.head_
                                                                                                                                                                                                                                                                            }, p.prototype.setHead = function(t) {
                                                                                                                                                                                                                                                                            this.head_ = t
                                                                                                                                                                                                                                                                            }, p.prototype.tail = function() {
                                                                                                                                                                                                                                                                            return this.tail_
                                                                                                                                                                                                                                                                            }, p.prototype.setTail = function(t) {
                                                                                                                                                                                                                                                                            this.tail_ = t
                                                                                                                                                                                                                                                                            }, p.prototype.getMap = function() {
                                                                                                                                                                                                                                                                            return this.map_
                                                                                                                                                                                                                                                                            }, p.prototype.initTriangulation = function() {
                                                                                                                                                                                                                                                                            var t, e = this.points_[0].x, n = this.points_[0].x, o = this.points_[0].y, r = this.points_[0].y, s = this.points_.length;
                                                                                                                                                                                                                                                                            for (t = 1; s > t; t++) {
                                                                                                                                                                                                                                                                            var a = this.points_[t];
                                                                                                                                                                                                                                                                            a.x > e && (e = a.x), a.x < n && (n = a.x), a.y > o && (o = a.y), a.y < r && (r = a.y)
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            this.pmin_ = new i(n, r), this.pmax_ = new i(e, o);
                                                                                                                                                                                                                                                                            var h = l * (e - n), c = l * (o - r);
                                                                                                                                                                                                                                                                            this.head_ = new i(e + h, r - c), this.tail_ = new i(n - h, r - c), this.points_.sort(i.compare)
                                                                                                                                                                                                                                                                            }, p.prototype.initEdges = function(t) {
                                                                                                                                                                                                                                                                            var e, n = t.length;
                                                                                                                                                                                                                                                                            for (e = 0; n > e; ++e)
                                                                                                                                                                                                                                                                            this.edge_list.push(new h(t[e], t[(e + 1) % n]))
                                                                                                                                                                                                                                                                            }, p.prototype.getPoint = function(t) {
                                                                                                                                                                                                                                                                            return this.points_[t]
                                                                                                                                                                                                                                                                            }, p.prototype.addToMap = function(t) {
                                                                                                                                                                                                                                                                            this.map_.push(t)
                                                                                                                                                                                                                                                                            }, p.prototype.locateNode = function(t) {
                                                                                                                                                                                                                                                                            return this.front_.locateNode(t.x)
                                                                                                                                                                                                                                                                            }, p.prototype.createAdvancingFront = function() {
                                                                                                                                                                                                                                                                            var t, e, n, i = new o(this.points_[0], this.tail_, this.head_);
                                                                                                                                                                                                                                                                            this.map_.push(i), t = new a(i.getPoint(1), i), e = new a(i.getPoint(0), i), n = new a(i.getPoint(2)), this.front_ = new s(t, n), t.next = e, e.next = n, e.prev = t, n.prev = e
                                                                                                                                                                                                                                                                            }, p.prototype.removeNode = function() {
                                                                                                                                                                                                                                                                            }, p.prototype.mapTriangleToNodes = function(t) {
                                                                                                                                                                                                                                                                            for (var e = 0; 3 > e; ++e)
                                                                                                                                                                                                                                                                            if (!t.getNeighbor(e)) {
                                                                                                                                                                                                                                                                            var n = this.front_.locatePoint(t.pointCW(t.getPoint(e)));
                                                                                                                                                                                                                                                                            n && (n.triangle = t)
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            }, p.prototype.removeFromMap = function(t) {
                                                                                                                                                                                                                                                                            var e, n = this.map_, i = n.length;
                                                                                                                                                                                                                                                                            for (e = 0; i > e; e++)
                                                                                                                                                                                                                                                                            if (n[e] === t) {
                                                                                                                                                                                                                                                                            n.splice(e, 1);
                                                                                                                                                                                                                                                                            break
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            }, p.prototype.meshClean = function(t) {
                                                                                                                                                                                                                                                                            for (var e, n, i = [t]; e = i.pop(); )
                                                                                                                                                                                                                                                                            if (!e.isInterior())
                                                                                                                                                                                                                                                                            for (e.setInterior(!0), this.triangles_.push(e), n = 0; 3 > n; n++)
                                                                                                                                                                                                                                                                            e.constrained_edge[n] || i.push(e.getNeighbor(n))
                                                                                                                                                                                                                                                                            }, e.exports = p
                                                                                                                                                                                                                                                                            }, {"./advancingfront": 2,"./point": 3,"./pointerror": 4,"./sweep": 6,"./triangle": 8}],8: [function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        "use strict";
                                                                                                                                                                                                                                                                                                                                                                        var n = t("./xy"), i = function(t, e, n) {
                                                                                                                                                                                                                                                                                                                                                                        this.points_ = [t, e, n], this.neighbors_ = [null, null, null], this.interior_ = !1, this.constrained_edge = [!1, !1, !1], this.delaunay_edge = [!1, !1, !1]
                                                                                                                                                                                                                                                                                                                                                                        }, o = n.toString;
                                                                                                                                                                                                                                                                                                                                                                        i.prototype.toString = function() {
                                                                                                                                                                                                                                                                                                                                                                        return "[" + o(this.points_[0]) + o(this.points_[1]) + o(this.points_[2]) + "]"
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getPoint = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return this.points_[t]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.GetPoint = i.prototype.getPoint, i.prototype.getPoints = function() {
                                                                                                                                                                                                                                                                                                                                                                        return this.points_
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getNeighbor = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return this.neighbors_[t]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.containsPoint = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        var e = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        return t === e[0] || t === e[1] || t === e[2]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.containsEdge = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return this.containsPoint(t.p) && this.containsPoint(t.q)
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.containsPoints = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        return this.containsPoint(t) && this.containsPoint(e)
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.isInterior = function() {
                                                                                                                                                                                                                                                                                                                                                                        return this.interior_
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.setInterior = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return this.interior_ = t, this
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.markNeighborPointers = function(t, e, n) {
                                                                                                                                                                                                                                                                                                                                                                        var i = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        if (t === i[2] && e === i[1] || t === i[1] && e === i[2])
                                                                                                                                                                                                                                                                                                                                                                        this.neighbors_[0] = n;
                                                                                                                                                                                                                                                                                                                                                                        else if (t === i[0] && e === i[2] || t === i[2] && e === i[0])
                                                                                                                                                                                                                                                                                                                                                                        this.neighbors_[1] = n;
                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                        if (!(t === i[0] && e === i[1] || t === i[1] && e === i[0]))
                                                                                                                                                                                                                                                                                                                                                                        throw new Error("poly2tri Invalid Triangle.markNeighborPointers() call");
                                                                                                                                                                                                                                                                                                                                                                        this.neighbors_[2] = n
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.markNeighbor = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        var e = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        t.containsPoints(e[1], e[2]) ? (this.neighbors_[0] = t, t.markNeighborPointers(e[1], e[2], this)) : t.containsPoints(e[0], e[2]) ? (this.neighbors_[1] = t, t.markNeighborPointers(e[0], e[2], this)) : t.containsPoints(e[0], e[1]) && (this.neighbors_[2] = t, t.markNeighborPointers(e[0], e[1], this))
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.clearNeigbors = function() {
                                                                                                                                                                                                                                                                                                                                                                        this.neighbors_[0] = null, this.neighbors_[1] = null, this.neighbors_[2] = null
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.clearDelunayEdges = function() {
                                                                                                                                                                                                                                                                                                                                                                        this.delaunay_edge[0] = !1, this.delaunay_edge[1] = !1, this.delaunay_edge[2] = !1
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.pointCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        var e = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        return t === e[0] ? e[2] : t === e[1] ? e[0] : t === e[2] ? e[1] : null
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.pointCCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        var e = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        return t === e[0] ? e[1] : t === e[1] ? e[2] : t === e[2] ? e[0] : null
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.neighborCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.neighbors_[1] : t === this.points_[1] ? this.neighbors_[2] : this.neighbors_[0]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.neighborCCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.neighbors_[2] : t === this.points_[1] ? this.neighbors_[0] : this.neighbors_[1]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getConstrainedEdgeCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.constrained_edge[1] : t === this.points_[1] ? this.constrained_edge[2] : this.constrained_edge[0]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getConstrainedEdgeCCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.constrained_edge[2] : t === this.points_[1] ? this.constrained_edge[0] : this.constrained_edge[1]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getConstrainedEdgeAcross = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.constrained_edge[0] : t === this.points_[1] ? this.constrained_edge[1] : this.constrained_edge[2]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.setConstrainedEdgeCW = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        t === this.points_[0] ? this.constrained_edge[1] = e : t === this.points_[1] ? this.constrained_edge[2] = e : this.constrained_edge[0] = e
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.setConstrainedEdgeCCW = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        t === this.points_[0] ? this.constrained_edge[2] = e : t === this.points_[1] ? this.constrained_edge[0] = e : this.constrained_edge[1] = e
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getDelaunayEdgeCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.delaunay_edge[1] : t === this.points_[1] ? this.delaunay_edge[2] : this.delaunay_edge[0]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.getDelaunayEdgeCCW = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.delaunay_edge[2] : t === this.points_[1] ? this.delaunay_edge[0] : this.delaunay_edge[1]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.setDelaunayEdgeCW = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        t === this.points_[0] ? this.delaunay_edge[1] = e : t === this.points_[1] ? this.delaunay_edge[2] = e : this.delaunay_edge[0] = e
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.setDelaunayEdgeCCW = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        t === this.points_[0] ? this.delaunay_edge[2] = e : t === this.points_[1] ? this.delaunay_edge[0] = e : this.delaunay_edge[1] = e
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.neighborAcross = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        return t === this.points_[0] ? this.neighbors_[0] : t === this.points_[1] ? this.neighbors_[1] : this.neighbors_[2]
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.oppositePoint = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        var n = t.pointCW(e);
                                                                                                                                                                                                                                                                                                                                                                        return this.pointCW(n)
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.legalize = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        var n = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        if (t === n[0])
                                                                                                                                                                                                                                                                                                                                                                        n[1] = n[0], n[0] = n[2], n[2] = e;
                                                                                                                                                                                                                                                                                                                                                                        else if (t === n[1])
                                                                                                                                                                                                                                                                                                                                                                        n[2] = n[1], n[1] = n[0], n[0] = e;
                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                        if (t !== n[2])
                                                                                                                                                                                                                                                                                                                                                                        throw new Error("poly2tri Invalid Triangle.legalize() call");
                                                                                                                                                                                                                                                                                                                                                                        n[0] = n[2], n[2] = n[1], n[1] = e
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.index = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        var e = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        if (t === e[0])
                                                                                                                                                                                                                                                                                                                                                                        return 0;
                                                                                                                                                                                                                                                                                                                                                                        if (t === e[1])
                                                                                                                                                                                                                                                                                                                                                                        return 1;
                                                                                                                                                                                                                                                                                                                                                                        if (t === e[2])
                                                                                                                                                                                                                                                                                                                                                                        return 2;
                                                                                                                                                                                                                                                                                                                                                                        throw new Error("poly2tri Invalid Triangle.index() call")
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.edgeIndex = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        var n = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        if (t === n[0]) {
                                                                                                                                                                                                                                                                                                                                                                        if (e === n[1])
                                                                                                                                                                                                                                                                                                                                                                        return 2;
                                                                                                                                                                                                                                                                                                                                                                        if (e === n[2])
                                                                                                                                                                                                                                                                                                                                                                        return 1
                                                                                                                                                                                                                                                                                                                                                                        } else if (t === n[1]) {
                                                                                                                                                                                                                                                                                                                                                                        if (e === n[2])
                                                                                                                                                                                                                                                                                                                                                                        return 0;
                                                                                                                                                                                                                                                                                                                                                                        if (e === n[0])
                                                                                                                                                                                                                                                                                                                                                                        return 2
                                                                                                                                                                                                                                                                                                                                                                        } else if (t === n[2]) {
                                                                                                                                                                                                                                                                                                                                                                        if (e === n[0])
                                                                                                                                                                                                                                                                                                                                                                        return 1;
                                                                                                                                                                                                                                                                                                                                                                        if (e === n[1])
                                                                                                                                                                                                                                                                                                                                                                        return 0
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        return -1
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.markConstrainedEdgeByIndex = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        this.constrained_edge[t] = !0
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.markConstrainedEdgeByEdge = function(t) {
                                                                                                                                                                                                                                                                                                                                                                        this.markConstrainedEdgeByPoints(t.p, t.q)
                                                                                                                                                                                                                                                                                                                                                                        }, i.prototype.markConstrainedEdgeByPoints = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                        var n = this.points_;
                                                                                                                                                                                                                                                                                                                                                                        e === n[0] && t === n[1] || e === n[1] && t === n[0] ? this.constrained_edge[2] = !0 : e === n[0] && t === n[2] || e === n[2] && t === n[0] ? this.constrained_edge[1] = !0 : (e === n[1] && t === n[2] || e === n[2] && t === n[1]) && (this.constrained_edge[0] = !0)
                                                                                                                                                                                                                                                                                                                                                                        }, e.exports = i
                                                                                                                                                                                                                                                                                                                                                                        }, {"./xy": 10}],9: [function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                                             "use strict";
                                                                                                                                                                                                                                                                                                                                                                                             function n(t, e, n) {
                                                                                                                                                                                                                                                                                                                                                                                             var i = (t.x - n.x) * (e.y - n.y), s = (t.y - n.y) * (e.x - n.x), a = i - s;
                                                                                                                                                                                                                                                                                                                                                                                             return a > -o && o > a ? r.COLLINEAR : a > 0 ? r.CCW : r.CW
                                                                                                                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                                                                                                                             function i(t, e, n, i) {
                                                                                                                                                                                                                                                                                                                                                                                             var r = (t.x - e.x) * (i.y - e.y) - (i.x - e.x) * (t.y - e.y);
                                                                                                                                                                                                                                                                                                                                                                                             if (r >= -o)
                                                                                                                                                                                                                                                                                                                                                                                             return !1;
                                                                                                                                                                                                                                                                                                                                                                                             var s = (t.x - n.x) * (i.y - n.y) - (i.x - n.x) * (t.y - n.y);
                                                                                                                                                                                                                                                                                                                                                                                             return o >= s ? !1 : !0
                                                                                                                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                                                                                                                             var o = 1e-12, r = {CW: 1,CCW: -1,COLLINEAR: 0};
                                                                                                                                                                                                                                                                                                                                                                                             e.exports = {EPSILON: o,Orientation: r,orient2d: n,inScanArea: i}
                                                                                                                                                                                                                                                                                                                                                                                             }, {}],10: [function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                                                         "use strict";
                                                                                                                                                                                                                                                                                                                                                                                                         function n(t) {
                                                                                                                                                                                                                                                                                                                                                                                                         return "(" + t.x + ";" + t.y + ")"
                                                                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                                                                         function i(t) {
                                                                                                                                                                                                                                                                                                                                                                                                         var e = t.toString();
                                                                                                                                                                                                                                                                                                                                                                                                         return "[object Object]" === e ? n(t) : e
                                                                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                                                                         function o(t, e) {
                                                                                                                                                                                                                                                                                                                                                                                                         return t.y === e.y ? t.x - e.x : t.y - e.y
                                                                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                                                                         function r(t, e) {
                                                                                                                                                                                                                                                                                                                                                                                                         return t.x === e.x && t.y === e.y
                                                                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                                                                         e.exports = {toString: i,toStringBase: n,compare: o,equals: r}
                                                                                                                                                                                                                                                                                                                                                                                                         }, {}]}, {}, [5])(5)
  }), function(t) {
    "use strict";
    var e, n = t.Uint8Array, i = t.HTMLCanvasElement, o = /\s*;\s*base64\s*(?:;|$)/i, r = function(t) {
        for (var i, o, r, s = t.length, a = new n(s / 4 * 3 | 0), l = 0, h = 0, c = [0, 0], u = 0, p = 0; s--; )
            o = t.charCodeAt(l++), i = e[o - 43], 255 !== i && i !== r && (c[1] = c[0], c[0] = o, p = p << 6 | i, u++, 4 === u && (a[h++] = p >>> 16, 61 !== c[1] && (a[h++] = p >>> 8), 61 !== c[0] && (a[h++] = p), u = 0));
        return a.buffer
    };
    n && (e = new n([62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51])), i && !i.prototype.toBlob && (i.prototype.toBlob = function(t, e) {
                                                                                                                                                                                                                                                                                                                                                                          if (e || (e = "image/png"), this.mozGetAsFile)
                                                                                                                                                                                                                                                                                                                                                                          return void t(this.mozGetAsFile("canvas", e));
                                                                                                                                                                                                                                                                                                                                                                          var i, s = Array.prototype.slice.call(arguments, 1), a = this.toDataURL.apply(this, s), l = a.indexOf(","), h = a.substring(l + 1), c = o.test(a.substring(0, l));
                                                                                                                                                                                                                                                                                                                                                                          Blob.fake ? (i = new Blob, i.encoding = c ? "base64" : "URI", i.data = h, i.size = h.length) : n && (i = c ? new Blob([r(h)], {type: e}) : new Blob([decodeURIComponent(h)], {type: e})), t(i)
                                                                                                                                                                                                                                                                                                                                                                          })
}(self);